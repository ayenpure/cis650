/**
 * I think you're in my seat
 */

const False = 0
const True = 1
range Bool = False..True

SEAT = SEAT[False],

SEAT[v:Bool] = (reserve -> SEAT[True] |
                query[v] -> SEAT[v]).

range Seats = 0..1

||SEATS = (seat[Seats]:SEAT).

LOCK = (acquire -> release -> LOCK).

TERMINAL = (choose[s:Seats] -> acquire -> seat[s].query[x:Bool] ->
            if !x then (seat[s].reserve -> release -> TERMINAL)
            else (release -> TERMINAL)
            ).

CHEATER = (choose[s:Seats] -> seat[s].query[x:Bool] ->
            seat[s].reserve -> CHEATER
          )+{acquire, release}.

set Terminals = {a,b}

||CONCERT = (Terminals:TERMINAL || Terminals::SEATS || Terminals::LOCK).

||UNSAFECONCERT = (a:CHEATER  || b:TERMINAL || Terminals::SEATS || Terminals::LOCK).

TEST = ({a.seat[s:Seats].reserve, b.seat[s:Seats].reserve} -> ERROR).

||PATCHEDCONCERT = (UNSAFECONCERT || TEST).

fluent ACQUIRE_LOCK_a = <a.acquire, a.release>
fluent ACQUIRE_LOCK_b = <b.acquire, b.release>

assert DONTSKIP_a = [](!a.seat[0].reserve U ACQUIRE_LOCK_a)

assert DONTSKIP_b = [](!b.seat[0].reserve U ACQUIRE_LOCK_b)

assert DOUBLE_BOOK_a = []!(b.seat[s:Seats].reserve && <> a.seat[s:Seats].reserve)

assert DOUBLE_BOOK_b = []!(a.seat[s:Seats].reserve && <> b.seat[s:Seats].reserve)

assert TWO_IN = []!(ACQUIRE_LOCK_a && ACQUIRE_LOCK_b)


