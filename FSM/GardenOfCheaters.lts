/** 
  * Garden of Cheaters
  */

const N = 4
range T = 0..N
set VarAlpha = {value.{read[T],write[T],
		       acquire,release}
	       }

VAR = VAR[0],
VAR[u:T] = (read[u]->VAR[u] | write[v:T]->VAR[v]).

LOCK = (acquire->release->LOCK).
||LOCKVAR = (LOCK || VAR).

TURNSTILE = (go    -> RUN),
RUN       = (arrive-> INCREMENT
            |end   -> TURNSTILE),
INCREMENT = (value.acquire
             -> value.read[x:T]->value.write[x+1]
             ->value.release->RUN
            )+VarAlpha.

CHEATER        = (go    -> CHEATRUN),
CHEATRUN       = (arrive-> CHEATINCREMENT
                  |end   -> CHEATER),
CHEATINCREMENT = (value.read[x:T]->value.write[x+1] 
                  ->CHEATRUN
                 )+VarAlpha.

DISPLAY =(value.read[T]->DISPLAY)+{value.{write[T],acquire,release}}.

/**
fluent WEST_ENGAGE = <west.value.read[i:T], west.value.write[i:T]> 
fluent EAST_ENGAGE = <east.value.read[i:T], east.value.write[i:T]>
assert MUTEX = []!(WEST_ENGAGE && EAST_ENGAGE)
*/

||GARDEN = (east:CHEATER || west:TURNSTILE || display:DISPLAY
            || {east,west,display}::value:LOCKVAR)/{go /{east,west}.go,end/{east,west}.end}\{east.value.acquire, east.value.release}.

assert VALID = [](west.value.acquire -> (!(east.value.read[i:T] || east.value.write[i:T]) U west.value.release))
